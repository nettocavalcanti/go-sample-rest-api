# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Test and Upload results

on:
  push:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.21.6' ]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Display Go version
      run: go version

    - name: Install dependencies
      run: go get .

    - name: Test with Go
    #  run: go test -json > TestResults-${{ matrix.go-version }}.json
      run: go test -race -json -v -coverprofile=coverage.txt ./... 2>&1 | tee /tmp/gotest.log | gotestfmt

    - name: Convert go coverage to corbetura format
      run: gocover-cobertura < coverage.txt > coverage.xml

    # - name: Upload Go test results
    #  uses: actions/upload-artifact@v3
    #  with:
    #    name: Go-results-${{ matrix.go-version }}
    #    path: TestResults-${{ matrix.go-version }}.json

    - name: Generate code coverage report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage.xml
        badge: false
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md